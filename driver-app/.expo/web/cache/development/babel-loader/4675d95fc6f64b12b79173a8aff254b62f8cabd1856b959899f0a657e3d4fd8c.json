{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar API_BASE_URL = 'http://localhost:5001/api';\nvar api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    try {\n      var token = yield AsyncStorage.getItem('driverToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    } catch (error) {\n      console.error('Error getting token:', error);\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    var _error$response;\n    if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 401) {\n      yield AsyncStorage.multiRemove(['driverToken', 'driverData']);\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var authAPI = {\n  login: function login(credentials) {\n    return api.post('/drivers/login', credentials);\n  },\n  register: function register(userData) {\n    return api.post('/drivers/register', userData);\n  },\n  getProfile: function getProfile() {\n    return api.get('/drivers/profile');\n  },\n  updateProfile: function updateProfile(profileData) {\n    return api.put('/drivers/profile', profileData);\n  }\n};\nexport var orderAPI = {\n  getOrders: function getOrders() {\n    return api.get('/drivers/orders');\n  },\n  getOrderDetails: function getOrderDetails(orderId) {\n    return api.get(`/drivers/orders/${orderId}`);\n  },\n  acceptOrder: function acceptOrder(orderId) {\n    return api.post(`/drivers/orders/${orderId}/accept`);\n  },\n  updateOrderStatus: function updateOrderStatus(orderId, status) {\n    return api.put(`/drivers/orders/${orderId}/status`, {\n      status: status\n    });\n  },\n  getEarnings: function getEarnings() {\n    return api.get('/drivers/earnings');\n  }\n};\nexport var locationAPI = {\n  updateLocation: function updateLocation(location) {\n    return api.put('/drivers/location', location);\n  },\n  toggleAvailability: function toggleAvailability(isAvailable) {\n    return api.put('/drivers/availability', {\n      isAvailable: isAvailable\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","AsyncStorage","API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","_ref","_asyncToGenerator","config","token","getItem","Authorization","error","console","_x","apply","arguments","Promise","reject","response","_ref2","_error$response","status","multiRemove","_x2","authAPI","login","credentials","post","register","userData","getProfile","get","updateProfile","profileData","put","orderAPI","getOrders","getOrderDetails","orderId","acceptOrder","updateOrderStatus","getEarnings","locationAPI","updateLocation","location","toggleAvailability","isAvailable"],"sources":["D:/Projects/Farmer_connect/FARMCONNECT/driver-app/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst API_BASE_URL = 'http://localhost:5001/api'; // Change this to your server URL\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    try {\r\n      const token = await AsyncStorage.getItem('driverToken');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting token:', error);\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired, clear storage\r\n      await AsyncStorage.multiRemove(['driverToken', 'driverData']);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/drivers/login', credentials),\r\n  register: (userData) => api.post('/drivers/register', userData),\r\n  getProfile: () => api.get('/drivers/profile'),\r\n  updateProfile: (profileData) => api.put('/drivers/profile', profileData),\r\n};\r\n\r\nexport const orderAPI = {\r\n  getOrders: () => api.get('/drivers/orders'),\r\n  getOrderDetails: (orderId) => api.get(`/drivers/orders/${orderId}`),\r\n  acceptOrder: (orderId) => api.post(`/drivers/orders/${orderId}/accept`),\r\n  updateOrderStatus: (orderId, status) => api.put(`/drivers/orders/${orderId}/status`, { status }),\r\n  getEarnings: () => api.get('/drivers/earnings'),\r\n};\r\n\r\nexport const locationAPI = {\r\n  updateLocation: (location) => api.put('/drivers/location', location),\r\n  toggleAvailability: (isAvailable) => api.put('/drivers/availability', { isAvailable }),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}